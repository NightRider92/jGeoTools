
import java.awt.Desktop;
import java.awt.Dimension;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.MessageDigest;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.UIManager;
import javax.swing.plaf.nimbus.NimbusLookAndFeel;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Moran
 */
public class mainWin extends javax.swing.JFrame {
    /* *** Declarations **** */

    static File file = null;
    static String last_converted = null;

    /* *********************** */
    /**
     * Creates new form mainWin
     */
    public mainWin() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();

        jMenuItem5.setText("Open last converted file in Notepad");
        jMenuItem5.setDoubleBuffered(true);
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("jGeoTools");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        setPreferredSize(new java.awt.Dimension(700, 390));

        jTable1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Point number", "Latitude [north]", "Longitude [east]", "Height [meters]"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setDoubleBuffered(true);
        jTable1.setSelectionBackground(new java.awt.Color(97, 123, 151));
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jMenuBar1.setDoubleBuffered(true);
        jMenuBar1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N

        jMenu3.setText(" Application ");
        jMenu3.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jMenu3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Earth-icon.png"))); // NOI18N
        jMenuItem4.setText("Quit application");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuBar1.add(jMenu3);

        jMenu1.setText(" WGS84 ");
        jMenu1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jMenu1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jMenuItem2.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Earth-icon.png"))); // NOI18N
        jMenuItem2.setText("Import WGS84 file");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(" SEGP1 ");
        jMenu2.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jMenu2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jMenuItem1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Earth-icon.png"))); // NOI18N
        jMenuItem1.setText("Export to degree format");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem3.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Earth-icon.png"))); // NOI18N
        jMenuItem3.setText("Export to decimal format");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        jMenu5.setText(" View ");
        jMenu5.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jMenu5.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItem1.setText("Always on top");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu5);

        jMenu4.setText(" Help ");
        jMenu4.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jMenu4.setVerifyInputWhenFocusTarget(false);
        jMenu4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jMenuItem7.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Earth-icon.png"))); // NOI18N
        jMenuItem7.setText("About software");
        jMenuItem7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Shows OpenFile dialog and gets its response (APPROVE_OPTION)
        JFileChooser openDialog = new JFileChooser();
        openDialog.setFileFilter(new FileNameExtensionFilter("Text Files (.txt)", "txt"));

        openDialog.setCurrentDirectory(file);
        int response = openDialog.showOpenDialog(this);

        if (response == JFileChooser.APPROVE_OPTION) {
            try {
                file = openDialog.getSelectedFile();
                List<String> data = (List<String>) WGS.Import(file.getPath());
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                // Clears table
                model.setRowCount(0);

                // Run extraction of data in Swing thread
                SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        // Split WGS84 data by whitespaces (more than one),
                        // tabs and commas and insert delimited data into table
                        if (data.size() > 0) {
                            data.stream().map((data1) -> data1.split("[ ]{2,}|\t|,")).forEach((line) -> {
                                model.addRow(new Object[]{line[0], line[1], line[2], line[3]});
                            });
                        }
                        return null;
                    }
                };
                worker.execute();
            } catch (FileNotFoundException ex) {
                Message.FileNotFound();
            } catch (IOException ex) {
                Message.UnknownIOException();
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getButton() == 3) {
            jPopupMenu1.show(jTable1, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            // Shows SaveFile dialog and gets its response (APPROVE_OPTION)
            if (jTable1.getRowCount() <= 0) {
                return;
            }
            JFileChooser saveDialog = new JFileChooser();
            saveDialog.setFileFilter(new FileNameExtensionFilter("Text Files (.txt)", "txt"));

            saveDialog.setCurrentDirectory(file);
            int response = saveDialog.showSaveDialog(this);

            if (response == JFileChooser.APPROVE_OPTION) {
                int HASH = MessageDigest.getInstance("MD5").hashCode();
                SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        //Runs method in new thread and creates hash-code so you can't overwrite existing file
                        try {
                            SEGP1.ExportDEG(saveDialog.getSelectedFile().getPath() + "[" + HASH + "]" + ".txt", jTable1);
                        } catch (Exception ex) {
                            //Message.GeneralException();
                            cancel(true);
                            return null;
                        }
                        return null;
                    }
                };
                worker.execute();
                last_converted = saveDialog.getSelectedFile().getPath() + "[" + HASH + "]" + ".txt";
            }
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        if (jCheckBoxMenuItem1.isSelected()) {
            this.setAlwaysOnTop(true);
        } else {
            this.setAlwaysOnTop(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            // Shows SaveFile dialog and gets its response (APPROVE_OPTION)
            if (jTable1.getRowCount() <= 0) {
                return;
            }
            JFileChooser saveDialog = new JFileChooser();
            saveDialog.setFileFilter(new FileNameExtensionFilter("Text Files (.txt)", "txt"));

            saveDialog.setCurrentDirectory(file);
            int response = saveDialog.showSaveDialog(this);

            if (response == JFileChooser.APPROVE_OPTION) {
                int HASH = MessageDigest.getInstance("MD5").hashCode();

                SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        //Runs method in new thread and creates hash-code so you can't overwrite existing file
                        try {
                            SEGP1.ExportDEC(saveDialog.getSelectedFile().getPath() + "[" + HASH + "]" + ".txt", jTable1);
                        } catch (Exception ex) {
                            //Message.GeneralException();
                            cancel(true);
                            return null;
                        }
                        return null;
                    }
                };
                worker.execute();
                last_converted = saveDialog.getSelectedFile().getPath() + "[" + HASH + "]" + ".txt";
            }
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        try {
            Desktop.getDesktop().open(new File(last_converted));
        } catch (Exception ex) {
            Message.FileNotFound();
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        aboutSoft about_software = new aboutSoft(this, true);
        about_software.setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new NimbusLookAndFeel());
        } catch (Exception e) {
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new mainWin().setVisible(true);
            mainWin.getFrames()[0].setLocationRelativeTo(null);
            mainWin.getFrames()[0].setMinimumSize(new Dimension(700, 390));
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
